//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClickOnce.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "18.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Messages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Messages() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ClickOnce.Resources.Messages", typeof(Messages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using the following project values:.
        /// </summary>
        public static string Build_Args {
            get {
                return ResourceManager.GetString("Build.Args", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Supplied as command line parameters:.
        /// </summary>
        public static string Build_Args_CommandLine {
            get {
                return ResourceManager.GetString("Build.Args.CommandLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inferred:.
        /// </summary>
        public static string Build_Args_Inferred {
            get {
                return ResourceManager.GetString("Build.Args.Inferred", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Supplied as settings (use clickonce configure to set):.
        /// </summary>
        public static string Build_Args_Settings {
            get {
                return ResourceManager.GetString("Build.Args.Settings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ClickOnce packager
        ///Copyright 2020 Andrew Mansell
        ///See license text for details (MIT).
        /// </summary>
        public static string Build_Banner {
            get {
                return ResourceManager.GetString("Build.Banner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument &apos;{0}&apos; value &apos;{1}&apos; is not convertible to {2}..
        /// </summary>
        public static string Build_Exceptions_Arg_NotConvertible {
            get {
                return ResourceManager.GetString("Build.Exceptions.Arg.NotConvertible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument &apos;{0}&apos; does not exist..
        /// </summary>
        public static string Build_Exceptions_Arg_NotFound {
            get {
                return ResourceManager.GetString("Build.Exceptions.Arg.NotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Template not found at &apos;{0}&apos;.
        /// </summary>
        public static string Build_Exceptions_DeploymentPage_TemplateNotFound {
            get {
                return ResourceManager.GetString("Build.Exceptions.DeploymentPage.TemplateNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to add entry point.
        /// </summary>
        public static string Build_Exceptions_EntryPoint_Failed {
            get {
                return ResourceManager.GetString("Build.Exceptions.EntryPoint.Failed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to infer entry point, multiple .exe files found.
        /// </summary>
        public static string Build_Exceptions_EntryPoint_Multiple {
            get {
                return ResourceManager.GetString("Build.Exceptions.EntryPoint.Multiple", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to infer entry point, no .exe files found.
        /// </summary>
        public static string Build_Exceptions_EntryPoint_None {
            get {
                return ResourceManager.GetString("Build.Exceptions.EntryPoint.None", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Entry point &apos;{0}&apos; is not a .Net Framework executable..
        /// </summary>
        public static string Build_Exceptions_EntryPoint_NotManaged {
            get {
                return ResourceManager.GetString("Build.Exceptions.EntryPoint.NotManaged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: {0}.
        /// </summary>
        public static string Build_Exceptions_Fatal {
            get {
                return ResourceManager.GetString("Build.Exceptions.Fatal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Help text not found.
        /// </summary>
        public static string Build_Exceptions_HelpText_NotFound {
            get {
                return ResourceManager.GetString("Build.Exceptions.HelpText.NotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid version number.
        /// </summary>
        public static string Build_Exceptions_VersionNumber_NotValid {
            get {
                return ResourceManager.GetString("Build.Exceptions.VersionNumber.NotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Verbose logging enabled.
        /// </summary>
        public static string Build_Logging_Verbose {
            get {
                return ResourceManager.GetString("Build.Logging.Verbose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creating autorun.inf....
        /// </summary>
        public static string Build_Proces_AutoRun {
            get {
                return ResourceManager.GetString("Build.Proces.AutoRun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Processing application....
        /// </summary>
        public static string Build_Process_Application {
            get {
                return ResourceManager.GetString("Build.Process.Application", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creating prerequisites bootstrapper....
        /// </summary>
        public static string Build_Process_Bootstrapper {
            get {
                return ResourceManager.GetString("Build.Process.Bootstrapper", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Processing deployment....
        /// </summary>
        public static string Build_Process_Deployment {
            get {
                return ResourceManager.GetString("Build.Process.Deployment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creating deployment page....
        /// </summary>
        public static string Build_Process_DeploymentPage {
            get {
                return ResourceManager.GetString("Build.Process.DeploymentPage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adding entry point....
        /// </summary>
        public static string Build_Process_EntryPoint {
            get {
                return ResourceManager.GetString("Build.Process.EntryPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adding file associations....
        /// </summary>
        public static string Build_Process_FileAssociations {
            get {
                return ResourceManager.GetString("Build.Process.FileAssociations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adding {0}....
        /// </summary>
        public static string Build_Process_Glob_Adding {
            get {
                return ResourceManager.GetString("Build.Process.Glob.Adding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Skipped &apos;{0}&apos;, not a managed assembly].
        /// </summary>
        public static string Build_Process_Glob_Skipped {
            get {
                return ResourceManager.GetString("Build.Process.Glob.Skipped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adding icon file....
        /// </summary>
        public static string Build_Process_IconFile {
            get {
                return ResourceManager.GetString("Build.Process.IconFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creating launcher app....
        /// </summary>
        public static string Build_Process_Launcher {
            get {
                return ResourceManager.GetString("Build.Process.Launcher", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Manifest written to &apos;{0}&apos;.
        /// </summary>
        public static string Build_Process_Manifest {
            get {
                return ResourceManager.GetString("Build.Process.Manifest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Manifest signed..
        /// </summary>
        public static string Build_Process_Manifest_Signed {
            get {
                return ResourceManager.GetString("Build.Process.Manifest.Signed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validating project....
        /// </summary>
        public static string Build_Process_Project_Validating {
            get {
                return ResourceManager.GetString("Build.Process.Project.Validating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creating ClickOnce package from source directory &apos;{0}&apos;.
        /// </summary>
        public static string Build_Verb_Create {
            get {
                return ResourceManager.GetString("Build.Verb.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the name of the application manifest file..
        /// </summary>
        public static string Help_Arg_ApplicationManifestFile {
            get {
                return ResourceManager.GetString("Help.Arg.ApplicationManifestFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be a valid file name, and should use a .manifest extension..
        /// </summary>
        public static string Help_Arg_ApplicationManifestFile_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.ApplicationManifestFile.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, a name is inferred from the EntryPoint, e.g. &apos;MyApp.exe.manifest&apos;..
        /// </summary>
        public static string Help_Arg_ApplicationManifestFile_Create {
            get {
                return ResourceManager.GetString("Help.Arg.ApplicationManifestFile.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies a colon-separated list of globbing patterns to match assemblies to be included..
        /// </summary>
        public static string Help_Arg_Assemblies {
            get {
                return ResourceManager.GetString("Help.Arg.Assemblies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the certificate password..
        /// </summary>
        public static string Help_Arg_CertificatePassword {
            get {
                return ResourceManager.GetString("Help.Arg.CertificatePassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the source of the certificate to use for signing. If omitted, the ClickOnce package will not be signed. Must be either be a path to a .pfx file, or stored certificate in the form Type\StoreName\CommonName, e.g. &apos;User\My\Certificate&apos;..
        /// </summary>
        public static string Help_Arg_CertificateSource {
            get {
                return ResourceManager.GetString("Help.Arg.CertificateSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boolean. Specifies whether or not to create an autorun.inf to launch the ClickOnce installer when deployed to removable media..
        /// </summary>
        public static string Help_Arg_CreateAutoRun {
            get {
                return ResourceManager.GetString("Help.Arg.CreateAutoRun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, defaults to false..
        /// </summary>
        public static string Help_Arg_CreateAutoRun_Create {
            get {
                return ResourceManager.GetString("Help.Arg.CreateAutoRun.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boolean. Specifies whether a shortcut to the application should be added to the user&apos;s desktop&apos;. Has no effect if LaunchMode is &apos;url&apos;..
        /// </summary>
        public static string Help_Arg_CreateDesktopShortcut {
            get {
                return ResourceManager.GetString("Help.Arg.CreateDesktopShortcut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, defaults to false..
        /// </summary>
        public static string Help_Arg_CreateDesktopShortcut_Create {
            get {
                return ResourceManager.GetString("Help.Arg.CreateDesktopShortcut.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the culture of the application..
        /// </summary>
        public static string Help_Arg_Culture {
            get {
                return ResourceManager.GetString("Help.Arg.Culture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be &apos;neutral&apos; or a valid culture (e.g. &apos;en-GB&apos;)..
        /// </summary>
        public static string Help_Arg_Culture_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.Culture.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, the culture of the EntryPoint is used..
        /// </summary>
        public static string Help_Arg_Culture_Create {
            get {
                return ResourceManager.GetString("Help.Arg.Culture.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies a colon-separated list of globbing patterns to match data files to be included..
        /// </summary>
        public static string Help_Arg_DataFiles {
            get {
                return ResourceManager.GetString("Help.Arg.DataFiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the name of the deployment manifest file..
        /// </summary>
        public static string Help_Arg_DeploymentManifestFile {
            get {
                return ResourceManager.GetString("Help.Arg.DeploymentManifestFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be a valid file name, and should use an .application extension..
        /// </summary>
        public static string Help_Arg_DeploymentManifestFile_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.DeploymentManifestFile.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specifed, a name is inferred from the EntryPoint, e.g. &apos;MyApp.application&apos;..
        /// </summary>
        public static string Help_Arg_DeploymentManifestFile_Create {
            get {
                return ResourceManager.GetString("Help.Arg.DeploymentManifestFile.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the name of the deployment page..
        /// </summary>
        public static string Help_Arg_DeploymentPage {
            get {
                return ResourceManager.GetString("Help.Arg.DeploymentPage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must end in &apos;.htm&apos; or &apos;.html&apos;..
        /// </summary>
        public static string Help_Arg_DeploymentPage_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.DeploymentPage.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specifed, no deployment page is created..
        /// </summary>
        public static string Help_Arg_DeploymentPage_Create {
            get {
                return ResourceManager.GetString("Help.Arg.DeploymentPage.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the template to use to create the deployment page..
        /// </summary>
        public static string Help_Arg_DeploymentPageTemplate {
            get {
                return ResourceManager.GetString("Help.Arg.DeploymentPageTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must end in &apos;.htm&apos; or &apos;.html&apos;..
        /// </summary>
        public static string Help_Arg_DeploymentPageTemplate_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.DeploymentPageTemplate.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, a default deployment page template will be used..
        /// </summary>
        public static string Help_Arg_DeploymentPageTemplate_Create {
            get {
                return ResourceManager.GetString("Help.Arg.DeploymentPageTemplate.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the deployment and update location for the application. Required if target framework is prior to &apos;net35&apos; and UpdateMode is any value other than &apos;off&apos;. If not specified and UpdateMode is not &apos;none&apos;, the application will only look for updates in its installation directory. If not specified, the application can only be installed by launching the .application file directly, not by downloading it..
        /// </summary>
        public static string Help_Arg_DeploymentUrl {
            get {
                return ResourceManager.GetString("Help.Arg.DeploymentUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be a valid and absolute URI (a URL or a UNC)..
        /// </summary>
        public static string Help_Arg_DeploymentUrl_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.DeploymentUrl.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies a description for the application..
        /// </summary>
        public static string Help_Arg_Description {
            get {
                return ResourceManager.GetString("Help.Arg.Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the application assembly that starts when the application is run..
        /// </summary>
        public static string Help_Arg_EntryPoint {
            get {
                return ResourceManager.GetString("Help.Arg.EntryPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be an .exe file targetting net20 onwards..
        /// </summary>
        public static string Help_Arg_EntryPoint_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.EntryPoint.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, the source directory is recursively searched for managed executables. If exactly one is found, it will be assigned to be the entry point..
        /// </summary>
        public static string Help_Arg_EntryPoint_Create {
            get {
                return ResourceManager.GetString("Help.Arg.EntryPoint.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the URL of the web page that is displayed in dialog boxes during ClickOnce installation..
        /// </summary>
        public static string Help_Arg_ErrorUrl {
            get {
                return ResourceManager.GetString("Help.Arg.ErrorUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be a valid and absolute URI (a URL or a UNC)..
        /// </summary>
        public static string Help_Arg_ErrorUrl_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.ErrorUrl.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies a colon-separated list of file associations to be registered..
        /// </summary>
        public static string Help_Arg_FileAssociations {
            get {
                return ResourceManager.GetString("Help.Arg.FileAssociations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Each entry must be a semi-colon delimited set of the following fields: {extension};{description};{progid};{icon}..
        /// </summary>
        public static string Help_Arg_FileAssociations_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.FileAssociations.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies a colon-separated list of globbing patterns to match non-assembly files to be included..
        /// </summary>
        public static string Help_Arg_Files {
            get {
                return ResourceManager.GetString("Help.Arg.Files", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the application icon file. This is used for the Start Menu and Add/Remove Programs dialog..
        /// </summary>
        public static string Help_Arg_IconFile {
            get {
                return ResourceManager.GetString("Help.Arg.IconFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be an .ico file..
        /// </summary>
        public static string Help_Arg_IconFile_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.IconFile.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, the source directory is recursively searched for .ico files. If exactly one is found it is used; othewise, a default icon is used..
        /// </summary>
        public static string Help_Arg_IconFile_Create {
            get {
                return ResourceManager.GetString("Help.Arg.IconFile.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the identity of the application. This is used for the application and deployment manifest file names and the packge folder name..
        /// </summary>
        public static string Help_Arg_Identity {
            get {
                return ResourceManager.GetString("Help.Arg.Identity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, a name is inferred from the EntryPoint..
        /// </summary>
        public static string Help_Arg_Identity_Create {
            get {
                return ResourceManager.GetString("Help.Arg.Identity.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies whether the application can be launched from the Start menu, from a URL, or both. Also allows browser-hosted deployments (Internet Explorer only)..
        /// </summary>
        public static string Help_Arg_LaunchMode {
            get {
                return ResourceManager.GetString("Help.Arg.LaunchMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be one of &apos;start&apos;, &apos;url&apos;, &apos;both&apos;, &apos;browser&apos;..
        /// </summary>
        public static string Help_Arg_LaunchMode_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.LaunchMode.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, defaults to &apos;start&apos;..
        /// </summary>
        public static string Help_Arg_LaunchMode_Create {
            get {
                return ResourceManager.GetString("Help.Arg.LaunchMode.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boolean. Merge comclass and typelib tags from Manifest files to be able to use Reg Free Com..
        /// </summary>
        public static string Help_Arg_MergeCom {
            get {
                return ResourceManager.GetString("Help.Arg.MergeCom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, defaults to false..
        /// </summary>
        public static string Help_Arg_MergeCom_Create {
            get {
                return ResourceManager.GetString("Help.Arg.MergeCom.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the minimum version the user must update to when starting the application. Has no effect is LaunchMode is &apos;url&apos; or UpdateMode is &apos;none&apos;..
        /// </summary>
        public static string Help_Arg_MinimumVersion {
            get {
                return ResourceManager.GetString("Help.Arg.MinimumVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be a dotted version number with 1 to 4 elements, each less than 63356. Must be equal to or lower than Version..
        /// </summary>
        public static string Help_Arg_MinimumVersion_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.MinimumVersion.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies a path under which optional files are stored. The first level of directories under this path will be used as the group names for the optional download groups. The DataFiles glob will be ignored for this path, as data files cannot be optional..
        /// </summary>
        public static string Help_Arg_OptionalFilesPath {
            get {
                return ResourceManager.GetString("Help.Arg.OptionalFilesPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, defaults to &apos;Optional&apos;..
        /// </summary>
        public static string Help_Arg_OptionalFilesPath_Create {
            get {
                return ResourceManager.GetString("Help.Arg.OptionalFilesPath.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies a description of the OsVersion..
        /// </summary>
        public static string Help_Arg_OsDescription {
            get {
                return ResourceManager.GetString("Help.Arg.OsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, a value is inferred from the OsVersion..
        /// </summary>
        public static string Help_Arg_OsDescription_Create {
            get {
                return ResourceManager.GetString("Help.Arg.OsDescription.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies a support URL for the OsVersion..
        /// </summary>
        public static string Help_Arg_OsSupportUrl {
            get {
                return ResourceManager.GetString("Help.Arg.OsSupportUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be a valid and absolute URI (a URL or a UNC)..
        /// </summary>
        public static string Help_Arg_OsSupportUrl_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.OsSupportUrl.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the minimum required operating system (OS) version required by the application. For example, the value &apos;5.1.2600.0&apos; indicates the operating system is Windows XP..
        /// </summary>
        public static string Help_Arg_OsVersion {
            get {
                return ResourceManager.GetString("Help.Arg.OsVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be a dotted version number with 2 to 4 elements. The first 2 elements must match a known Windows version (e.g. &apos;6.0&apos; for Windows Vista)..
        /// </summary>
        public static string Help_Arg_OsVersion_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.OsVersion.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, the value is inferred from the TargetFramework..
        /// </summary>
        public static string Help_Arg_OsVersion_Create {
            get {
                return ResourceManager.GetString("Help.Arg.OsVersion.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies which manifests to create..
        /// </summary>
        public static string Help_Arg_PackageMode {
            get {
                return ResourceManager.GetString("Help.Arg.PackageMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be one of &apos;none&apos;, &apos;application&apos;, &apos;deployment&apos;, &apos;both&apos;..
        /// </summary>
        public static string Help_Arg_PackageMode_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.PackageMode.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If &apos;none&apos;, only validation of supplied arguments is performed. If not specified, defaults to &apos;both&apos;..
        /// </summary>
        public static string Help_Arg_PackageMode_Create {
            get {
                return ResourceManager.GetString("Help.Arg.PackageMode.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the path under the Target where the application package will be created. This should incorporate the Version number so that multiple versions can be published..
        /// </summary>
        public static string Help_Arg_PackagePath {
            get {
                return ResourceManager.GetString("Help.Arg.PackagePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, a value is inferred from the EntryPoint, e.g. &apos;Application Files/MyApp_1_0_0_0&apos;..
        /// </summary>
        public static string Help_Arg_PackagePath_Create {
            get {
                return ResourceManager.GetString("Help.Arg.PackagePath.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the target platform of the application..
        /// </summary>
        public static string Help_Arg_Platform {
            get {
                return ResourceManager.GetString("Help.Arg.Platform", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be one of &apos;AnyCPU&apos;, &apos;x86&apos;, &apos;x64&apos;, &apos;Itanium&apos;..
        /// </summary>
        public static string Help_Arg_Platform_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.Platform.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, the target platform will be inferred from the EntryPoint. Note, setting this value can cause ClickOnce validation errors if the specified value does not match the entry assembly, therefore it is recommended to leave this option unset..
        /// </summary>
        public static string Help_Arg_Platform_Create {
            get {
                return ResourceManager.GetString("Help.Arg.Platform.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies a colon-separated list of prerequisites to be installed. These must match a known bootstrapper product code..
        /// </summary>
        public static string Help_Arg_Prerequisites {
            get {
                return ResourceManager.GetString("Help.Arg.Prerequisites", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies where prerequisites should be downloaded from..
        /// </summary>
        public static string Help_Arg_PrerequisitesLocation {
            get {
                return ResourceManager.GetString("Help.Arg.PrerequisitesLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be one of &apos;vendor&apos;, &apos;deployment&apos; or a URL..
        /// </summary>
        public static string Help_Arg_PrerequisitesLocation_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.PrerequisitesLocation.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, defaults to &apos;vendor&apos;..
        /// </summary>
        public static string Help_Arg_PrerequisitesLocation_Create {
            get {
                return ResourceManager.GetString("Help.Arg.PrerequisitesLocation.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the name of the product. This name is used for the shortcut name on the Start menu and is part of the name that appears in the Add or Remove Programs dialog box..
        /// </summary>
        public static string Help_Arg_Product {
            get {
                return ResourceManager.GetString("Help.Arg.Product", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, defaults to the Name..
        /// </summary>
        public static string Help_Arg_Product_Create {
            get {
                return ResourceManager.GetString("Help.Arg.Product.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the publisher of the application. This name is used for the folder name on the Start menu and is part of the name that appears in the Add or Remove Programs dialog box..
        /// </summary>
        public static string Help_Arg_Publisher {
            get {
                return ResourceManager.GetString("Help.Arg.Publisher", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, a publisher is inferred from the EntryPoint..
        /// </summary>
        public static string Help_Arg_Publisher_Create {
            get {
                return ResourceManager.GetString("Help.Arg.Publisher.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boolean. Displays only minimal information when the ClickOnce package is built..
        /// </summary>
        public static string Help_Arg_Quiet {
            get {
                return ResourceManager.GetString("Help.Arg.Quiet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, defaults to false..
        /// </summary>
        public static string Help_Arg_Quiet_Create {
            get {
                return ResourceManager.GetString("Help.Arg.Quiet.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boolean. Specifies whether or not the application should have access to its site of origin. Has no effect if TrustInfo is &apos;FullTrust&apos; or a custom trust file..
        /// </summary>
        public static string Help_Arg_SameSite {
            get {
                return ResourceManager.GetString("Help.Arg.SameSite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, defaults to true..
        /// </summary>
        public static string Help_Arg_SameSite_Create {
            get {
                return ResourceManager.GetString("Help.Arg.SameSite.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the base directory for all source globbing patterns..
        /// </summary>
        public static string Help_Arg_Source {
            get {
                return ResourceManager.GetString("Help.Arg.Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, defaults to the current directory..
        /// </summary>
        public static string Help_Arg_Source_Create {
            get {
                return ResourceManager.GetString("Help.Arg.Source.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the name of the suite to which the application belongs. If specified, this determines the folder on the Start menu where the application is located after deployment..
        /// </summary>
        public static string Help_Arg_Suite {
            get {
                return ResourceManager.GetString("Help.Arg.Suite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the URL of the web page that is displayed in the Add or Remove Programs dialog box for the application..
        /// </summary>
        public static string Help_Arg_SupportUrl {
            get {
                return ResourceManager.GetString("Help.Arg.SupportUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be a valid and absolute URI (a URL or a UNC)..
        /// </summary>
        public static string Help_Arg_SupportUrl_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.SupportUrl.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the directory to which ClickOnce packages will be published. If a relative path is specified, it will be relative to the source directory. This directory will be automatically excluded from all source globbing patterns..
        /// </summary>
        public static string Help_Arg_Target {
            get {
                return ResourceManager.GetString("Help.Arg.Target", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, defaults to &apos;publish&apos;..
        /// </summary>
        public static string Help_Arg_Target_Create {
            get {
                return ResourceManager.GetString("Help.Arg.Target.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the target framework of the application. Only .Net Framework targets net20 through to net48 are valid..
        /// </summary>
        public static string Help_Arg_TargetFramework {
            get {
                return ResourceManager.GetString("Help.Arg.TargetFramework", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be a net framework from &apos;net20&apos; onwards..
        /// </summary>
        public static string Help_Arg_TargetFramework_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.TargetFramework.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, defaults to &apos;net472&apos;..
        /// </summary>
        public static string Help_Arg_TargetFramework_Create {
            get {
                return ResourceManager.GetString("Help.Arg.TargetFramework.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the URL of a timestamp server to use when signing manifests..
        /// </summary>
        public static string Help_Arg_TimestampUrl {
            get {
                return ResourceManager.GetString("Help.Arg.TimestampUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify trust information..
        /// </summary>
        public static string Help_Arg_TrustInfo {
            get {
                return ResourceManager.GetString("Help.Arg.TrustInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be one of: &apos;Full&apos;, &apos;LocalIntranet&apos;, &apos;Internet&apos;, or a path to an XML file containing custom trust info..
        /// </summary>
        public static string Help_Arg_TrustInfo_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.TrustInfo.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, defaults to &apos;Full&apos;..
        /// </summary>
        public static string Help_Arg_TrustInfo_Create {
            get {
                return ResourceManager.GetString("Help.Arg.TrustInfo.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boolean. Specifies whether URL query-string parameters should be made available to the application. Has no effect if LaunchMode is &apos;start&apos;..
        /// </summary>
        public static string Help_Arg_TrustUrlParameters {
            get {
                return ResourceManager.GetString("Help.Arg.TrustUrlParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, defaults to false..
        /// </summary>
        public static string Help_Arg_TrustUrlParameters_Create {
            get {
                return ResourceManager.GetString("Help.Arg.TrustUrlParameters.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies how application updates should be deployed..
        /// </summary>
        public static string Help_Arg_UpdateMode {
            get {
                return ResourceManager.GetString("Help.Arg.UpdateMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be one of &apos;none&apos;, &apos;starting&apos;, &apos;started&apos;, or a number of hours, weeks or days (e.g. &apos;1w&apos;). Only one unit can be specifed, and the interval cannot describe more than 1 year, regardless of unit..
        /// </summary>
        public static string Help_Arg_UpdateMode_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.UpdateMode.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, defaults to &apos;starting&apos; if TargetFramework is &apos;net35&apos; or higher; otherwise, defaults to &apos;none&apos;..
        /// </summary>
        public static string Help_Arg_UpdateMode_Create {
            get {
                return ResourceManager.GetString("Help.Arg.UpdateMode.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boolean. Specifies which manifest should be used for trust decisions. If true, the Product, Publisher, and SupportUrl properties are written to the application manifest; otherwise, they are written to the deployment manifest..
        /// </summary>
        public static string Help_Arg_UseApplicationTrust {
            get {
                return ResourceManager.GetString("Help.Arg.UseApplicationTrust", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, defaults to false..
        /// </summary>
        public static string Help_Arg_UseApplicationTrust_Create {
            get {
                return ResourceManager.GetString("Help.Arg.UseApplicationTrust.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boolean. Specifies whether the .deploy file name extension mapping is used. If this parameter is true, every program file is published with a .deploy file name extension. This option is useful for web server security to limit the number of file name extensions that must be unblocked to enable ClickOnce application deployment..
        /// </summary>
        public static string Help_Arg_UseDeployExtension {
            get {
                return ResourceManager.GetString("Help.Arg.UseDeployExtension", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, defaults to false..
        /// </summary>
        public static string Help_Arg_UseDeployExtension_Create {
            get {
                return ResourceManager.GetString("Help.Arg.UseDeployExtension.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies whether or not a launcher should be created. If &apos;auto&apos;, a launcher will be created if the EntryPoint is not a .Net Framework executable..
        /// </summary>
        public static string Help_Arg_UseLauncher {
            get {
                return ResourceManager.GetString("Help.Arg.UseLauncher", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be one of &apos;true&apos;, &apos;false&apos;, &apos;auto&apos;..
        /// </summary>
        public static string Help_Arg_UseLauncher_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.UseLauncher.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, defaults to &apos;auto&apos;..
        /// </summary>
        public static string Help_Arg_UseLauncher_Create {
            get {
                return ResourceManager.GetString("Help.Arg.UseLauncher.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boolean. Displays extra information when the ClickOnce package is built..
        /// </summary>
        public static string Help_Arg_Verbose {
            get {
                return ResourceManager.GetString("Help.Arg.Verbose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, defaults to false..
        /// </summary>
        public static string Help_Arg_Verbose_Create {
            get {
                return ResourceManager.GetString("Help.Arg.Verbose.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the version of the deployment. This need not be (and usually isn&apos;t) the same as the version of the application..
        /// </summary>
        public static string Help_Arg_Version {
            get {
                return ResourceManager.GetString("Help.Arg.Version", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must be a dotted version number with 1 to 4 elements, each less than 63356..
        /// </summary>
        public static string Help_Arg_Version_Constraint {
            get {
                return ResourceManager.GetString("Help.Arg.Version.Constraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specified, the version number of the EntryPoint is used..
        /// </summary>
        public static string Help_Arg_Version_Create {
            get {
                return ResourceManager.GetString("Help.Arg.Version.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not specifed and UpdateMode is not &apos;none&apos;, defaults to Version..
        /// </summary>
        public static string Help_Args_MinimumVersion_Create {
            get {
                return ResourceManager.GetString("Help.Args.MinimumVersion.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configure default argument values..
        /// </summary>
        public static string Help_Verb_Configure {
            get {
                return ResourceManager.GetString("Help.Verb.Configure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a ClickOnce package from scratch..
        /// </summary>
        public static string Help_Verb_Create {
            get {
                return ResourceManager.GetString("Help.Verb.Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to done..
        /// </summary>
        public static string Result_Done {
            get {
                return ResourceManager.GetString("Result.Done", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to none found..
        /// </summary>
        public static string Result_NoneFound {
            get {
                return ResourceManager.GetString("Result.NoneFound", resourceCulture);
            }
        }
    }
}
